/*     */ package edu.carleton.cas.jetty.embedded;
/*     */ 
/*     */ import edu.carleton.cas.constants.Shared;
/*     */ import edu.carleton.cas.file.Utils;
/*     */ import edu.carleton.cas.logging.Logger;
/*     */ import java.io.Closeable;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.logging.Level;
/*     */ import javax.servlet.ServletException;
/*     */ import javax.servlet.ServletOutputStream;
/*     */ import javax.servlet.http.HttpServlet;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import javax.servlet.http.HttpServletResponse;
/*     */ import org.eclipse.jetty.server.Handler;
/*     */ import org.eclipse.jetty.server.Server;
/*     */ import org.eclipse.jetty.servlet.ServletHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ServletProcessor
/*     */   implements Runnable, Closeable
/*     */ {
/*     */   private static ServletProcessor instance;
/*     */   private int port;
/*     */   private Thread thread;
/*     */   private String course;
/*     */   private String activity;
/*     */   
/*     */   public ServletProcessor(String course, String activity) {
/*  36 */     this.port = 8888;
/*  37 */     this.course = course;
/*  38 */     this.activity = activity;
/*     */   }
/*     */   
/*     */   public ServletProcessor(int port, String course, String activity) {
/*  42 */     this.port = port;
/*  43 */     this.course = course;
/*  44 */     this.activity = activity;
/*     */   }
/*     */   
/*     */   public static ServletProcessor getInstance(String course, String activity) {
/*  48 */     if (instance == null) {
/*  49 */       Logger.log(Level.INFO, "Web Server: ", "Starting");
/*     */       try {
/*  51 */         instance = new ServletProcessor(course, activity);
/*  52 */         instance.thread = new Thread(instance);
/*  53 */         instance.thread.start();
/*  54 */       } catch (Exception exception) {}
/*     */     } 
/*     */     
/*  57 */     return instance;
/*     */   }
/*     */ 
/*     */   
/*     */   public void run() {
/*     */     try {
/*  63 */       Server server = new Server(this.port);
/*  64 */       ServletHandler handler = new ServletHandler();
/*  65 */       server.setHandler((Handler)handler);
/*     */ 
/*     */       
/*  68 */       handler.addServletWithMapping(MultipleChoiceQuestionServlet.class, "/*");
/*  69 */       server.start();
/*  70 */       Logger.log(Level.INFO, "Web Server: ", "Running on " + instance.port);
/*  71 */       server.join();
/*  72 */     } catch (Exception e) {
/*  73 */       Logger.log(Level.SEVERE, "Web Server: ", "Failed to start on " + instance.port + "," + e.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class MultipleChoiceQuestionServlet
/*     */     extends HttpServlet
/*     */   {
/*     */     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
/*  84 */       String name = request.getRequestURI();
/*     */       
/*  86 */       String mimeType = "application/octet-stream";
/*  87 */       ServletOutputStream os = response.getOutputStream();
/*  88 */       FileInputStream fis = new FileInputStream(String.valueOf(Shared.getExamDirectory(ServletProcessor.instance.course, ServletProcessor.instance.activity)) + name);
/*  89 */       Utils.copyInputStream(fis, (OutputStream)os);
/*     */       
/*  91 */       response.setContentType(mimeType);
/*  92 */       response.setStatus(200);
/*     */     }
/*     */ 
/*     */     
/*     */     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
/*  97 */       Enumeration<String> mapn = request.getParameterNames();
/*     */       
/*  99 */       String[] questionFileName = request.getParameterValues("QUESTION");
/* 100 */       if (questionFileName == null || questionFileName.length == 0) {
/* 101 */         String name = "";
/* 102 */         while (mapn.hasMoreElements()) {
/* 103 */           name = String.valueOf(name) + " " + (String)mapn.nextElement();
/*     */         }
/* 105 */         Logger.log(Level.SEVERE, "Unknown question processed: ", name);
/* 106 */         response.setContentType("text/html");
/* 107 */         response.setStatus(200);
/* 108 */         response.getWriter().println("<h1>No question name found</h1>");
/*     */       } else {
/* 110 */         PrintWriter answerFile = new PrintWriter(
/* 111 */             String.valueOf(Shared.getExamDirectory(ServletProcessor.instance.course, ServletProcessor.instance.activity)) + File.separator + questionFileName[0] + ".txt");
/*     */         
/* 113 */         answerFile.append("# Generated by CoMaS on ");
/* 114 */         answerFile.append((new Date()).toString());
/* 115 */         answerFile.append(". DO NOT EDIT\n");
/* 116 */         while (mapn.hasMoreElements()) {
/* 117 */           String name = mapn.nextElement();
/* 118 */           String value = request.getParameterValues(name)[0];
/* 119 */           if (!name.equalsIgnoreCase("QUESTION")) {
/* 120 */             answerFile.append(name);
/* 121 */             answerFile.append("=");
/* 122 */             answerFile.append(value);
/* 123 */             answerFile.append("\n");
/*     */           } 
/*     */         } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 132 */         answerFile.close();
/* 133 */         response.setContentType("text/plain");
/* 134 */         response.setStatus(200);
/* 135 */         response.getWriter().println("Saved answers for " + questionFileName[0]);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 142 */     if (this.thread != null) {
/* 143 */       this.thread.interrupt();
/* 144 */       this.thread = null;
/*     */     } 
/* 146 */     if (instance != null)
/* 147 */       instance = null; 
/*     */   }
/*     */ }


/* Location:              C:\Users\Thomas\Desktop\Gamer Chair\CoMaS\CoMaS-0.7.4g\!\edu\carleton\cas\jetty\embedded\ServletProcessor.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */